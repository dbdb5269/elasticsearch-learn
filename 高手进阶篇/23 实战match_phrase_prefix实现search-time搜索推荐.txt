1、搜索推荐：search as you type，搜索提示

hello w --> 搜索

你还没输完，就给你推荐想要搜索的东西

原理跟match_phrase类似，唯一的区别，就是把最后一个term作为前缀去搜索

hello就是去进行match，搜索对应的term
w，会作为前缀，去扫描整个倒排索引，找到所有w开头的term
然后找到所有doc中，既包含hello，又包含w开头的字符的doc
根据你的slop去计算，在slop范围内，能不能让hello w，正好跟doc中的hello和w开头的单词的position相匹配

max_expansions：指定prefix最多匹配多少个term，超过这个数量就不继续匹配了，限定性能

默认情况下，前缀要扫描所有的倒排索引中的term，去查找w打头的单词，但是这样性能太差。可以用max_expansions限定，w前缀最多匹配多少个term就不再继续搜索倒排索引了。

GET my_index/my_type/_search
{
  "query": {
    "match_phrase_prefix": {
      "title": "hello w"
    }
  }
}

{
  "took": 4,
  "timed_out": false,
  "_shards": {
    "total": 5,
    "successful": 5,
    "failed": 0
  },
  "hits": {
    "total": 3,
    "max_score": 0.7854939,
    "hits": [
      {
        "_index": "my_index",
        "_type": "my_type",
        "_id": "2",
        "_score": 0.7854939,
        "_source": {
          "title": "hello we"
        }
      },
      {
        "_index": "my_index",
        "_type": "my_type",
        "_id": "1",
        "_score": 0.51623213,
        "_source": {
          "title": "hello world"
        }
      },
      {
        "_index": "my_index",
        "_type": "my_type",
        "_id": "3",
        "_score": 0.51623213,
        "_source": {
          "title": "hello win"
        }
      }
    ]
  }
}

尽量不要用，因为，最后一个前缀始终要去扫描大量的索引，性能可能会很差