match和match_phrase(proximity match)区别

match --> 只要简单地匹配到了一个term，就可以将term对应的doc作为结果返回，扫描倒排索引，扫描到了就OK

match_phrase --> 首先是扫描到所有term的doc list；找到包含所有term的doc list；然后对每个doc都计算每个term的position，是否符合指定的范围；slop，需要进行复杂的运算，来判断能否通过slop的移动，匹配一个doc

match query的性能比match_phrase和proximity match(有slop的)要高很多，因为后两者都要计算position的距离。

但是别太担心，因为ES的性能一般都在毫秒级别，match query一般就在几毫秒，或者几十毫秒，而match_phrase和proximity match的性能在几十毫秒到几百毫秒之间，所以也是可以接受的。

尽可能去优化proximity match的性能，一般就是减少要进行proximity match搜索的document数量。主要思路就是，用match query先过滤出需要的数据，然后再用proximity match只针对每个shard的分数排名前n个doc起作用，来重新调整它们的分数，这个过程称之为rescoring，重计分，因为一般用户会分页查询，只会看到前几页的数据，所以不需要对所有结果进行proximity match操作。

很多情况下，match也许出来1000个doc，其实用户大部分情况下是分页查询的，所以可能最多只会看前几页，比如一页是10条，最多也许就看5页，就是50条

proximity match只要对前50个doc进行slop移动去匹配，去贡献自己的分数即可，不需要对全部1000个doc都去进行计算和贡献分数

rescore：重打分

GET forum/article/_search
{
  "query": {
    "match": {
      "content": "java spark"
    }
  },
  "rescore" : {
    "window_size" : 50, 对前50个结果，用近似匹配重打分
    "query" : {
      "rescore_query" : {
        "match_phrase" : {
          "content" : {
            "query" : "java spark", 
            "slop" : 50
          }
        }
      }
    }
  }
}