1、算法介绍

分数越高，越匹配

relevance score算法，简单来说，就是计算出，一个索引中的文本，与搜索文本，他们之间的关联匹配程度。

es使用的是 term frequency/inverse document frequency算法，简称为TF/IDF算法

核心思路三条：
(1)term frequency：搜索文本中的各个词条在field文本中出现了多少次，出现次数越多，越相关
搜索请求：hello world

doc1: hello you, and world is very good  这个更匹配
doc2: hello, how are you

(2)inverse document frequency: 搜索文本中的各个词条在整个索引的所有文档中出现了多少次，出现的次数越多，就越不相关

搜索请求：hello world
doc1: hello, today is very good
doc2: hi world, how are you

比如说，在index中有1万条document，hello这个单词在所有的document中，一共出现了1000次，world这个单词在所有的document中，一共出现了100次。

所以doc2更相关

(3) field-length norm: field长度，field越长，相关度越弱。

搜索请求：hello world

doc1: { "title" : "hello article", "content" : "balabala 等1万个单词" }
doc2: { "title" : "my article", "content" : "balabala 等1万个单词 包含hi world" }

假设hello和world在整个doc1和doc2出现的次数是一样多的

那么因为title的字段比content更短，所以doc1更相关

2、_score是如何被计算出来的
GET test_index/test_type/_search?explain
{
  "query": {
    "match": {
      "test_field": "test hello"
    }
  }
}

{
  "took": 2,
  "timed_out": false,
  "_shards": {
    "total": 5,
    "successful": 5,
    "failed": 0
  },
  "hits": {
    "total": 2,
    "max_score": 0.5377023,
    "hits": [
      {
        "_shard": "[test_index][2]",
        "_node": "9OkiX8rAQkuyHg9MelpMig",
        "_index": "test_index",
        "_type": "test_type",
        "_id": "4",
        "_score": 0.5377023,
        "_source": {
          "test_field": "test test22222"
        },
        "_explanation": {
          "value": 0.5377023,
          "description": "sum of:",
          "details": [
            {
              "value": 0.5377023,
              "description": "weight(test_field:test in 0) [PerFieldSimilarity], result of:",
              "details": [
                {
                  "value": 0.5377023,
                  "description": "score(doc=0,freq=1.0 = termFreq=1.0\n), product of:",
                  "details": [
                    {
                      "value": 0.6931472,
                      "description": "idf, computed as log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5)) from:",
                      "details": [
                        {
                          "value": 1,
                          "description": "docFreq",
                          "details": []
                        },
                        {
                          "value": 2,
                          "description": "docCount",
                          "details": []
                        }
                      ]
                    },
                    {
                      "value": 0.7757405,
                      "description": "tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1 - b + b * fieldLength / avgFieldLength)) from:",
                      "details": [
                        {
                          "value": 1,
                          "description": "termFreq=1.0",
                          "details": []
                        },
                        {
                          "value": 1.2,
                          "description": "parameter k1",
                          "details": []
                        },
                        {
                          "value": 0.75,
                          "description": "parameter b",
                          "details": []
                        },
                        {
                          "value": 1.5,
                          "description": "avgFieldLength",
                          "details": []
                        },
                        {
                          "value": 2.56,
                          "description": "fieldLength",
                          "details": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      },
      {
        "_shard": "[test_index][1]",
        "_node": "9OkiX8rAQkuyHg9MelpMig",
        "_index": "test_index",
        "_type": "test_type",
        "_id": "8",
        "_score": 0.49191087,
        "_source": {
          "test_field": "test client 1"
        },
        "_explanation": {
          "value": 0.49191087,
          "description": "sum of:",
          "details": [
            {
              "value": 0.49191087,
              "description": "weight(test_field:test in 0) [PerFieldSimilarity], result of:",
              "details": [
                {
                  "value": 0.49191087,
                  "description": "score(doc=0,freq=1.0 = termFreq=1.0\n), product of:",
                  "details": [
                    {
                      "value": 0.6931472,
                      "description": "idf, computed as log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5)) from:",
                      "details": [
                        {
                          "value": 1,
                          "description": "docFreq",
                          "details": []
                        },
                        {
                          "value": 2,
                          "description": "docCount",
                          "details": []
                        }
                      ]
                    },
                    {
                      "value": 0.7096774,
                      "description": "tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1 - b + b * fieldLength / avgFieldLength)) from:",
                      "details": [
                        {
                          "value": 1,
                          "description": "termFreq=1.0",
                          "details": []
                        },
                        {
                          "value": 1.2,
                          "description": "parameter k1",
                          "details": []
                        },
                        {
                          "value": 0.75,
                          "description": "parameter b",
                          "details": []
                        },
                        {
                          "value": 2,
                          "description": "avgFieldLength",
                          "details": []
                        },
                        {
                          "value": 4,
                          "description": "fieldLength",
                          "details": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    ]
  }
}

3、分析一个document是如何被匹配上的
GET /test_index/test_type/8/_explain
{
  "query": {
    "match": {
      "test_field": "test hello"
    }
  }
}

可以看某一个document能不能匹配上query