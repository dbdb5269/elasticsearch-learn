1、什么是partial update？
PUT /index/type/id 创建文档&替换文档。每次执行流程基本是这样的：
（1）应用程序先发起一个get请求，获取到document，展示到前台界面，供用户查看和修改
（2）用户在前台界面修改数据，发送到后台
（3）后台代码，会将用户修改的数据在内存中进行执行，然后封装好修改后的全量数据
（4）然后发送PUT请求，到ES中，进行全量替换
（5）ES将老的document标记为deleted，然后重新创建一个新的document

partial update

POST /index/type/id/_update
{
	"doc": {
		"field"  不需要全量的数据
	}
}

看起来，好像就比较方便了，每次就传递少数几个发生修改的field即可，不需要将全量的document数据发送过去

2、图解partial update实现原理以及其优点
partial update：看起来很方便的操作，实际内部原理是怎样的
其实ES内部对partial update的实际执行，跟传统的全量替换方式，是几乎一样的
（1）内部获取document
（2）将传过来的field更新到document的json中
（3）将老的document标记为deleted
（4）将修改后的新document创建出来

看起来和PUT方式一样，只不过位置不同
partial update相较于全量替换的优点：
（1）所有的查询、修改和写回操作，都发生在ES中的一个shard内部，避免了所有的网络数据传输的开销（减少2次网络请求），大大提升了性能
（2）减少了查询和修改中的时间间隔，可以有效减少并发冲突的情况

PUT /test_index/test_type/10
{
  "test_field1": "test1",
  "test_field2": "test2"
}

POST /test_index/test_type/10
{
  "doc": { 
    "test_field2" : "update test2"
  }
}
