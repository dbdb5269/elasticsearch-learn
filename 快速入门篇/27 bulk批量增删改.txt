1、bulk语法

POST /_bulk
每一个操作要两个json串，语法如下：
{"action" : {"metadata"}}
{"data"}

举例，比如你现在要创建一个文档，放bulk里面，看起来会是这样子的：
{"index" : {"_index": "test_index", "_type" : "test_type", "_id" : "1"}}
{"test_field1": "test1", "test_field2": "test2"}

有哪些类型的操作可以执行呢?
(1)delete: 删除一个文档,只要一行json串就可以了
(2)create: 类似PUT /index/type/id/_create,强制创建
(3)index: 普通的PUT操作,可以是创建文档,也可以是全量替换文档
(4)update: 执行的partial update操作

==========之前的数据==========
{
  "took": 4,
  "timed_out": false,
  "_shards": {
    "total": 5,
    "successful": 5,
    "failed": 0
  },
  "hits": {
    "total": 6,
    "max_score": 1,
    "hits": [
      {
        "_index": "test_index",
        "_type": "test_type",
        "_id": "8",
        "_score": 1,
        "_source": {
          "test_field": "test client 1"
        }
      },
      {
        "_index": "test_index",
        "_type": "test_type",
        "_id": "10",
        "_score": 1,
        "_source": {
          "doc": {
            "test_field2": "update test2"
          }
        }
      },
      {
        "_index": "test_index",
        "_type": "test_type",
        "_id": "4",
        "_score": 1,
        "_source": {
          "test_field": "test test22222"
        }
      },
      {
        "_index": "test_index",
        "_type": "test_type",
        "_id": "6",
        "_score": 1,
        "_source": {
          "test_content": "test test"
        }
      },
      {
        "_index": "test_index",
        "_type": "test_type",
        "_id": "1",
        "_score": 1,
        "_source": {
          "test_field1": "test field1",
          "test_field2": "test field2"
        }
      },
      {
        "_index": "test_index",
        "_type": "test_type",
        "_id": "11",
        "_score": 1,
        "_source": {
          "num": 1,
          "tags": []
        }
      }
    ]
  }
}

bulk api对json的语法,有严格的要求,每个json串不能换行,只能放一行,
同时一个json串和一个json串之间,必须有一个换行

===============执行语句===============
POST /_bulk
{"delete": {"_index" : "test_index","_type" : "test_type","_id" : 10}}
{"create" : {"_index" : "test_index","_type" : "test_type","_id" : 3}}
{"test_field" : "test3"}
{"create" : {"_index" : "test_index","_type" : "test_type","_id" : 2}}
{"test_field" : "test2"}
{"index" : {"_index" : "test_index","_type" : "test_type","_id" : 5}}
{"test_field" : "test5"}
{"index" : {"_index" : "test_index","_type" : "test_type","_id" : 1}}
{"test_field" : "test1"}
{"update" : {"_index" : "test_index","_type" : "test_type","_id" : 6}}
{"doc": {"test_content" : "test6"}}

===============结果===============
{
  "took": 106,
  "errors": false,
  "items": [
    {
      "delete": {
        "found": true,
        "_index": "test_index",
        "_type": "test_type",
        "_id": "10",
        "_version": 3,
        "result": "deleted",
        "_shards": {
          "total": 2,
          "successful": 1,
          "failed": 0
        },
        "status": 200
      }
    },
    {
      "create": {
        "_index": "test_index",
        "_type": "test_type",
        "_id": "3",
        "_version": 1,
        "result": "created",
        "_shards": {
          "total": 2,
          "successful": 1,
          "failed": 0
        },
        "created": true,
        "status": 201
      }
    },
    {
      "create": {
        "_index": "test_index",
        "_type": "test_type",
        "_id": "2",
        "_version": 1,
        "result": "created",
        "_shards": {
          "total": 2,
          "successful": 1,
          "failed": 0
        },
        "created": true,
        "status": 201
      }
    },
    {
      "index": {
        "_index": "test_index",
        "_type": "test_type",
        "_id": "5",
        "_version": 1,
        "result": "created",
        "_shards": {
          "total": 2,
          "successful": 1,
          "failed": 0
        },
        "created": true,
        "status": 201
      }
    },
    {
      "index": {
        "_index": "test_index",
        "_type": "test_type",
        "_id": "1",
        "_version": 2,
        "result": "updated",
        "_shards": {
          "total": 2,
          "successful": 1,
          "failed": 0
        },
        "created": false,
        "status": 200
      }
    },
    {
      "update": {
        "_index": "test_index",
        "_type": "test_type",
        "_id": "6",
        "_version": 6,
        "result": "updated",
        "_shards": {
          "total": 2,
          "successful": 1,
          "failed": 0
        },
        "status": 200
      }
    }
  ]
}

bulk操作中,任意一个操作失败,是不会影响其他的操作的,但是在返回结果里,会告诉异常日志

2、bulk size最佳大小
bulk request会加载到内存里，如果太大的话，性能反而会下降
因此需要反复尝试一个最佳的bulk size。
一般从1000~5000条数据开始，尝试逐渐增加。
另外，如果看大小的话，最好是在5~15MB之间